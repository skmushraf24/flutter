 You have to develop a cake-ordering application that allows users to place orders for cakes and view them on the admin panel. The application will have the following features:

code:

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'firebase_options.dart'; // generated by FlutterFire CLI

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(MyApp());
}

/// =====================
/// AUTH VIEWMODEL
/// =====================
class AuthViewModel extends ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  User? user;

  AuthViewModel() {
    user = _auth.currentUser;
    _auth.authStateChanges().listen((u) {
      user = u;
      notifyListeners();
    });
  }

  Future<String?> signIn(String email, String password) async {
    try {
      await _auth.signInWithEmailAndPassword(email: email, password: password);
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> signUp(String email, String password) async {
    try {
      await _auth.createUserWithEmailAndPassword(email: email, password: password);
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<void> signOut() async {
    await _auth.signOut();
  }
}

/// =====================
/// ORDER VIEWMODEL
/// =====================
class OrderViewModel extends ChangeNotifier {
  final CollectionReference _orders = FirebaseFirestore.instance.collection('orders');
  List<Map<String, dynamic>> orders = [];

  Future<void> fetchOrders({String? userId}) async {
    QuerySnapshot snapshot;
    if (userId != null) {
      snapshot = await _orders.where('userId', isEqualTo: userId).get();
    } else {
      snapshot = await _orders.get();
    }
    orders = snapshot.docs.map((doc) => {...doc.data() as Map<String, dynamic>, 'id': doc.id}).toList();
    notifyListeners();
  }

  Future<void> placeOrder(String userId, String userName, String cakeType, String size, int quantity) async {
    await _orders.add({
      'userId': userId,
      'userName': userName,
      'cakeType': cakeType,
      'size': size,
      'quantity': quantity,
      'status': 'Pending',
      'orderTime': Timestamp.now(),
    });
    await fetchOrders(userId: userId);
  }

  Future<void> updateStatus(String orderId, String status) async {
    await _orders.doc(orderId).update({'status': status});
    await fetchOrders();
  }
}

/// =====================
/// MAIN APP
/// =====================
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthViewModel()),
        ChangeNotifierProvider(create: (_) => OrderViewModel()),
      ],
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Cake Ordering App',
        theme: ThemeData(primarySwatch: Colors.pink),
        home: AuthWrapper(),
      ),
    );
  }
}

/// =====================
/// AUTH WRAPPER
/// =====================
class AuthWrapper extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final authVM = Provider.of<AuthViewModel>(context);
    if (authVM.user != null) {
      if (authVM.user!.email == 'admin@example.com') {
        return AdminPanel();
      } else {
        return UserPanel();
      }
    } else {
      return LoginView();
    }
  }
}

/// =====================
/// LOGIN VIEW
/// =====================
class LoginView extends StatefulWidget {
  @override
  State<LoginView> createState() => _LoginViewState();
}

class _LoginViewState extends State<LoginView> {
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  bool isLogin = true;
  bool loading = false;

  @override
  Widget build(BuildContext context) {
    final authVM = Provider.of<AuthViewModel>(context);

    return Scaffold(
      appBar: AppBar(title: Text(isLogin ? 'Login' : 'Register')),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(controller: emailController, decoration: InputDecoration(labelText: 'Email')),
            TextField(controller: passwordController, decoration: InputDecoration(labelText: 'Password'), obscureText: true),
            SizedBox(height: 20),
            loading
                ? CircularProgressIndicator()
                : ElevatedButton(
                    onPressed: () async {
                      setState(() => loading = true);
                      String? error;
                      if (isLogin) {
                        error = await authVM.signIn(emailController.text, passwordController.text);
                      } else {
                        error = await authVM.signUp(emailController.text, passwordController.text);
                      }
                      setState(() => loading = false);
                      if (error != null) {
                        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(error)));
                      }
                    },
                    child: Text(isLogin ? 'Login' : 'Register'),
                  ),
            TextButton(
              onPressed: () => setState(() => isLogin = !isLogin),
              child: Text(isLogin ? 'Create an account' : 'Already have an account? Login'),
            )
          ],
        ),
      ),
    );
  }
}

/// =====================
/// USER PANEL
/// =====================
class UserPanel extends StatefulWidget {
  @override
  State<UserPanel> createState() => _UserPanelState();
}

class _UserPanelState extends State<UserPanel> {
  final cakeController = TextEditingController();
  final sizeController = TextEditingController();
  final quantityController = TextEditingController(text: '1');

  @override
  void initState() {
    super.initState();
    final authVM = Provider.of<AuthViewModel>(context, listen: false);
    final orderVM = Provider.of<OrderViewModel>(context, listen: false);
    orderVM.fetchOrders(userId: authVM.user!.uid);
  }

  @override
  Widget build(BuildContext context) {
    final authVM = Provider.of<AuthViewModel>(context);
    final orderVM = Provider.of<OrderViewModel>(context);

    return Scaffold(
      appBar: AppBar(
        title: Text('Place Cake Order'),
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: () async {
              await authVM.signOut();
            },
          )
        ],
      ),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(controller: cakeController, decoration: InputDecoration(labelText: 'Cake Type')),
            TextField(controller: sizeController, decoration: InputDecoration(labelText: 'Size')),
            TextField(controller: quantityController, decoration: InputDecoration(labelText: 'Quantity'), keyboardType: TextInputType.number),
            ElevatedButton(
              onPressed: () {
                if (authVM.user != null) {
                  orderVM.placeOrder(authVM.user!.uid, authVM.user!.email ?? 'User', cakeController.text, sizeController.text, int.parse(quantityController.text));
                  cakeController.clear();
                  sizeController.clear();
                  quantityController.text = '1';
                }
              },
              child: Text('Place Order'),
            ),
            SizedBox(height: 20),
            Expanded(
              child: ListView.builder(
                itemCount: orderVM.orders.length,
                itemBuilder: (_, index) {
                  final order = orderVM.orders[index];
                  return Card(
                    child: ListTile(
                      title: Text('${order['cakeType']} (${order['size']}) x${order['quantity']}'),
                      subtitle: Text('Status: ${order['status']}'),
                    ),
                  );
                },
              ),
            )
          ],
        ),
      ),
    );
  }
}

/// =====================
/// ADMIN PANEL
/// =====================
class AdminPanel extends StatefulWidget {
  @override
  State<AdminPanel> createState() => _AdminPanelState();
}

class _AdminPanelState extends State<AdminPanel> {
  @override
  void initState() {
    super.initState();
    final orderVM = Provider.of<OrderViewModel>(context, listen: false);
    orderVM.fetchOrders();
  }

  @override
  Widget build(BuildContext context) {
    final orderVM = Provider.of<OrderViewModel>(context);

    return Scaffold(
      appBar: AppBar(title: Text('Admin Panel')),
      body: ListView.builder(
        padding: EdgeInsets.all(16),
        itemCount: orderVM.orders.length,
        itemBuilder: (_, index) {
          final order = orderVM.orders[index];
          return Card(
            color: Colors.pink[100],
            margin: EdgeInsets.symmetric(vertical: 8),
            child: Padding(
              padding: EdgeInsets.all(12),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Order Id: ${order['id']}'),
                      Text('Status: ${order['status']}'),
                      Text('Cake: ${order['cakeType']} (${order['size']}) x${order['quantity']}'),
                      Text('User: ${order['userName']}'),
                    ],
                  ),
                  Row(
                    children: ['Pending', 'Preparing', 'Out for delivery', 'Delivered'].map((status) {
                      return GestureDetector(
                        onTap: () {
                          orderVM.updateStatus(order['id'], status);
                        },
                        child: Container(
                          margin: EdgeInsets.symmetric(horizontal: 2),
                          width: 20,
                          height: 20,
                          color: order['status'] == status ? Colors.green : Colors.white,
                        ),
                      );
                    }).toList(),
                  )
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
